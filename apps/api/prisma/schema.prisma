// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Download {
  ipAddress String   @id
  createdAt DateTime @default(now())
  file      String
  verified  Boolean  @default(false)
}

model Voucher {
  id                       String   @id @default(cuid())
  email                    String
  checkoutId               String?
  code                     String   @unique
  createdAt                DateTime @default(now())
  expiresAt                DateTime
  maxDownloads             Int      @default(1)
  downloadCount            Int      @default(0)
  betterBedrockContentOnly Boolean  @default(false)
  blocked                  Boolean  @default(false)
}

enum AnalyticsType {
  file
  general
}

model Analytics {
  id    String        @id @default(cuid())
  type  AnalyticsType
  name  String
  date  DateTime      @default(now()) @db.Date
  value Int           @default(0)

  @@unique([name, date, type])
}

model User {
  id       String @id @default(cuid())
  googleId String @unique
  email    String @unique
  name     String @unique

  admin Boolean @default(false)

  customLinkvertise Boolean @default(false)
  linkvertiseId     String?
  linkvertiseSecret String?

  bio       String
  banned    Boolean   @default(false)
  createdAt DateTime  @default(now())
  projects  Project[]
  comments  Comment[]
  ratings   Rating[]

  reported Report[] @relation("ReportReporter")

  reports Report[] @relation("ReportTargetUser")
}

enum ProjectType {
  texturepacks
  addons
  scripts
  maps
  skinPacks
  other
}

model Project {
  title     String
  id        String
  draft     Boolean @default(true)
  submitted Boolean @default(false)

  description          Json
  itemWeight           Float // In MB (e.g. 11.5)
  betterBedrockContent Boolean  @default(false)
  lastChanged          DateTime @default(now())
  createdAt            DateTime @default(now())

  error String?

  thumbnail    String?
  downloadFile String?

  tags Tag[]
  type ProjectType

  userId String
  user   User   @relation(fields: [userId], references: [id])

  comments Comment[]
  ratings   Rating[]
  reports Report[] @relation("ReportTargetProject")

  @@id([id, draft])
  @@unique([id, draft])
}

model Tag {
  name String

  projectId    String
  projectDraft Boolean

  project Project @relation(fields: [projectId, projectDraft], references: [id, draft], onDelete: Cascade)

  @@unique([projectId, projectDraft, name])
}

model Comment {
  id       String @id @default(cuid())
  content  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  projectId    String
  projectDraft Boolean
  project      Project @relation(fields: [projectId, projectDraft], references: [id, draft], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  pinned Boolean @default(false)

  createdAt DateTime @default(now())

  deleted   Boolean   @default(false)
  deletedAt DateTime?

  @@index([projectId, projectDraft])
  @@index([parentId])
  @@index([pinned])
}

model Rating {
  id String @id @default(cuid())

  rating Int
  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId    String
  projectDraft Boolean
  project      Project @relation(fields: [projectId, projectDraft], references: [id, draft], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@index([projectId, projectDraft])
}

model Report {
  id String @id @default(cuid())

  reporterId String
  reporter   User   @relation("ReportReporter", fields: [reporterId], references: [id])

  reportedUserId String?
  reportedUser   User?    @relation("ReportTargetUser", fields: [reportedUserId], references: [id])

  reportedProjectId    String?
  reportedProjectDraft Boolean?
  reportedProject      Project? @relation("ReportTargetProject", fields: [reportedProjectId, reportedProjectDraft], references: [id, draft], onDelete: Cascade)

  message   String

  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  createdAt DateTime @default(now())

  @@index([reportedUserId])
  @@index([reportedProjectId, reportedProjectDraft])
  @@index([reporterId])
}
