/* tslint:disable */
/* eslint-disable */
/**
 * Better Bedrock API
 * The API used for handling downloads from Better Bedrock site
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CheckoutOffersDto
 */
export interface CheckoutOffersDto {
    /**
     * Array of checkout option groups
     * @type {Array<CheckoutOptionGroupDto>}
     * @memberof CheckoutOffersDto
     */
    'offers': Array<CheckoutOptionGroupDto>;
}
/**
 * 
 * @export
 * @interface CheckoutOptionEntryDto
 */
export interface CheckoutOptionEntryDto {
    /**
     * Stripe price ID
     * @type {string}
     * @memberof CheckoutOptionEntryDto
     */
    'priceId': string;
    /**
     * Pricing option details
     * @type {PriceOptionDto}
     * @memberof CheckoutOptionEntryDto
     */
    'priceOption': PriceOptionDto;
}
/**
 * 
 * @export
 * @interface CheckoutOptionGroupDto
 */
export interface CheckoutOptionGroupDto {
    /**
     * Title of the group (e.g. Week, Month)
     * @type {string}
     * @memberof CheckoutOptionGroupDto
     */
    'title': string;
    /**
     * List of pricing entries for this group
     * @type {Array<CheckoutOptionEntryDto>}
     * @memberof CheckoutOptionGroupDto
     */
    'items': Array<CheckoutOptionEntryDto>;
}
/**
 * 
 * @export
 * @interface CreateCheckoutSessionResponseDto
 */
export interface CreateCheckoutSessionResponseDto {
    /**
     * Id of the Stripe\'s checkout session
     * @type {string}
     * @memberof CreateCheckoutSessionResponseDto
     */
    'checkoutId': string;
}
/**
 * 
 * @export
 * @interface CreateVoucher
 */
export interface CreateVoucher {
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'email': string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof CreateVoucher
     */
    'code': string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'expiresAt': string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof CreateVoucher
     */
    'maxDownloads': number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof CreateVoucher
     */
    'downloadCount': number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof CreateVoucher
     */
    'betterBedrockContentOnly': boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof CreateVoucher
     */
    'blocked': boolean;
}
/**
 * 
 * @export
 * @interface DownloadsButtonDto
 */
export interface DownloadsButtonDto {
    /**
     * 
     * @type {DownloadsButtonType}
     * @memberof DownloadsButtonDto
     */
    'type': DownloadsButtonType;
    /**
     * 
     * @type {string}
     * @memberof DownloadsButtonDto
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsButtonDto
     */
    'link'?: string;
    /**
     * 
     * @type {DownloadsNotificationDto}
     * @memberof DownloadsButtonDto
     */
    'notification'?: DownloadsNotificationDto;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DownloadsButtonType = {
    White: 'white',
    Dark: 'dark',
    Green: 'green'
} as const;

export type DownloadsButtonType = typeof DownloadsButtonType[keyof typeof DownloadsButtonType];


/**
 * 
 * @export
 * @interface DownloadsDto
 */
export interface DownloadsDto {
    /**
     * 
     * @type {Array<DownloadsListDto>}
     * @memberof DownloadsDto
     */
    'main': Array<DownloadsListDto>;
    /**
     * 
     * @type {Array<DownloadsListDto>}
     * @memberof DownloadsDto
     */
    'community': Array<DownloadsListDto>;
    /**
     * 
     * @type {Array<DownloadsListDto>}
     * @memberof DownloadsDto
     */
    'sideProjects': Array<DownloadsListDto>;
}
/**
 * 
 * @export
 * @interface DownloadsItemDto
 */
export interface DownloadsItemDto {
    /**
     * 
     * @type {DownloadsButtonType}
     * @memberof DownloadsItemDto
     */
    'buttonType': DownloadsButtonType;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'creator': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'downloadId': string;
    /**
     * 
     * @type {number}
     * @memberof DownloadsItemDto
     */
    'itemWeight': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DownloadsItemDto
     */
    'imageAssetUrl': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DownloadsItemDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'titleColor'?: string;
}


/**
 * 
 * @export
 * @interface DownloadsListDto
 */
export interface DownloadsListDto {
    /**
     * 
     * @type {string}
     * @memberof DownloadsListDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsListDto
     */
    'description': string;
    /**
     * 
     * @type {Array<DownloadsButtonDto>}
     * @memberof DownloadsListDto
     */
    'buttons'?: Array<DownloadsButtonDto>;
    /**
     * 
     * @type {Array<DownloadsItemDto>}
     * @memberof DownloadsListDto
     */
    'items': Array<DownloadsItemDto>;
}
/**
 * 
 * @export
 * @interface DownloadsNotificationDto
 */
export interface DownloadsNotificationDto {
    /**
     * 
     * @type {DownloadsNotificationType}
     * @memberof DownloadsNotificationDto
     */
    'type': DownloadsNotificationType;
    /**
     * 
     * @type {string}
     * @memberof DownloadsNotificationDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadsNotificationDto
     */
    'description': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DownloadsNotificationType = {
    Warning: 'warning',
    Success: 'success',
    Info: 'info',
    Error: 'error'
} as const;

export type DownloadsNotificationType = typeof DownloadsNotificationType[keyof typeof DownloadsNotificationType];


/**
 * 
 * @export
 * @interface PriceOptionDto
 */
export interface PriceOptionDto {
    /**
     * Price in EUR
     * @type {number}
     * @memberof PriceOptionDto
     */
    'price': number;
    /**
     * Description of the pricing option
     * @type {string}
     * @memberof PriceOptionDto
     */
    'label': string;
    /**
     * A title for the DownloadMethodCard
     * @type {string}
     * @memberof PriceOptionDto
     */
    'title': string;
    /**
     * Whether this option is featured
     * @type {boolean}
     * @memberof PriceOptionDto
     */
    'featured': boolean;
    /**
     * How many dowloads does user get with the voucher
     * @type {number}
     * @memberof PriceOptionDto
     */
    'maxDownloads': number;
    /**
     * How many days from today does user have to use the voucher
     * @type {number}
     * @memberof PriceOptionDto
     */
    'expiresAt': number;
    /**
     * Specifies whether the voucher allows for download of Better Bedrock content
     * @type {boolean}
     * @memberof PriceOptionDto
     */
    'betterBedrockContentOnly': boolean;
}
/**
 * 
 * @export
 * @interface UpdateVoucher
 */
export interface UpdateVoucher {
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'email'?: string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof UpdateVoucher
     */
    'code'?: string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'expiresAt'?: string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof UpdateVoucher
     */
    'maxDownloads'?: number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof UpdateVoucher
     */
    'downloadCount'?: number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof UpdateVoucher
     */
    'betterBedrockContentOnly'?: boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof UpdateVoucher
     */
    'blocked'?: boolean;
}
/**
 * 
 * @export
 * @interface VoucherDto
 */
export interface VoucherDto {
    /**
     * Unique identifier of the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'id': string;
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'email': string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof VoucherDto
     */
    'code': string;
    /**
     * Date and time when the voucher was created
     * @type {string}
     * @memberof VoucherDto
     */
    'createdAt': string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'expiresAt': string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof VoucherDto
     */
    'maxDownloads': number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof VoucherDto
     */
    'downloadCount': number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof VoucherDto
     */
    'betterBedrockContentOnly': boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof VoucherDto
     */
    'blocked': boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthenticate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthenticate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerAuthenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerAuthenticate(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAuthenticate(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAuthenticate(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerActivate: async (checkoutId?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (checkoutId !== undefined) {
                localVarQueryParameter['checkoutId'] = checkoutId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerCreate: async (priceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'priceId' is not null or undefined
            assertParamExists('checkoutControllerCreate', 'priceId', priceId)
            const localVarPath = `/checkout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (priceId !== undefined) {
                localVarQueryParameter['priceId'] = priceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerOffers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerWebhook: async (stripeSignature: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeSignature' is not null or undefined
            assertParamExists('checkoutControllerWebhook', 'stripeSignature', stripeSignature)
            const localVarPath = `/checkout/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (stripeSignature != null) {
                localVarHeaderParameter['stripe-signature'] = String(stripeSignature);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerActivate(checkoutId, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerActivate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCheckoutSessionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerCreate(priceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerOffers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutOffersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerOffers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerWebhook(stripeSignature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.checkoutControllerActivate(checkoutId, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateCheckoutSessionResponseDto> {
            return localVarFp.checkoutControllerCreate(priceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerOffers(options?: RawAxiosRequestConfig): AxiosPromise<CheckoutOffersDto> {
            return localVarFp.checkoutControllerOffers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkoutControllerWebhook(stripeSignature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     * 
     * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
     * @param {string} [code] Code of a voucher to activate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerActivate(checkoutId, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} priceId Id of the Stripe\&#39;s price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerCreate(priceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerOffers(options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerOffers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stripeSignature 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerWebhook(stripeSignature, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDownloads: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/downloads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerDownloads(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerDownloads(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerDownloads']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDownloads(options?: RawAxiosRequestConfig): AxiosPromise<DownloadsDto> {
            return localVarFp.contentControllerDownloads(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentControllerDownloads(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerDownloads(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownload: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGenerate: async (file: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('downloadControllerGenerate', 'file', file)
            const localVarPath = `/download/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hash Hash generated to go through the ads on linkvertise
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerVerify: async (hash: string, code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('downloadControllerVerify', 'hash', hash)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('downloadControllerVerify', 'code', code)
            const localVarPath = `/download/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerDownload(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerDownload(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerDownload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerGenerate(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerGenerate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} hash Hash generated to go through the ads on linkvertise
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerVerify(hash: string, code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadsItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerVerify(hash, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerVerify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownload(options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadControllerDownload(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadControllerGenerate(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hash Hash generated to go through the ads on linkvertise
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerVerify(hash: string, code: string, options?: RawAxiosRequestConfig): AxiosPromise<DownloadsItemDto> {
            return localVarFp.downloadControllerVerify(hash, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerDownload(options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerDownload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} file Download ID to generate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerGenerate(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hash Hash generated to go through the ads on linkvertise
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerVerify(hash: string, code: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerVerify(hash, code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoucherApi - axios parameter creator
 * @export
 */
export const VoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerCreate: async (createVoucher: CreateVoucher, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVoucher' is not null or undefined
            assertParamExists('voucherControllerCreate', 'createVoucher', createVoucher)
            const localVarPath = `/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVoucher, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerUpdate: async (id: string, updateVoucher: UpdateVoucher, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voucherControllerUpdate', 'id', id)
            // verify required parameter 'updateVoucher' is not null or undefined
            assertParamExists('voucherControllerUpdate', 'updateVoucher', updateVoucher)
            const localVarPath = `/voucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVoucher, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerVouchers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherApi - functional programming interface
 * @export
 */
export const VoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerCreate(createVoucher, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerUpdate(id, updateVoucher, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerVouchers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoucherDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerVouchers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerVouchers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoucherApi - factory interface
 * @export
 */
export const VoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.voucherControllerCreate(createVoucher, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.voucherControllerUpdate(id, updateVoucher, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerVouchers(options?: RawAxiosRequestConfig): AxiosPromise<Array<VoucherDto>> {
            return localVarFp.voucherControllerVouchers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoucherApi - object-oriented interface
 * @export
 * @class VoucherApi
 * @extends {BaseAPI}
 */
export class VoucherApi extends BaseAPI {
    /**
     * 
     * @param {CreateVoucher} createVoucher 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerCreate(createVoucher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateVoucher} updateVoucher 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerUpdate(id, updateVoucher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerVouchers(options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerVouchers(options).then((request) => request(this.axios, this.basePath));
    }
}



