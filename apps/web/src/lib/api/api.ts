/* tslint:disable */
/* eslint-disable */
/**
 * Better Bedrock API
 * The API used for handling downloads from Better Bedrock site
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AnalyticsDto
 */
export interface AnalyticsDto {
    /**
     * 
     * @type {AnalyticsType}
     * @memberof AnalyticsDto
     */
    'type': AnalyticsType;
    /**
     * 
     * @type {AnalyticsNames}
     * @memberof AnalyticsDto
     */
    'name': AnalyticsNames;
    /**
     * Unique identifier of the analytics entry
     * @type {string}
     * @memberof AnalyticsDto
     */
    'id': string;
    /**
     * The date when the analytics data was recorded
     * @type {string}
     * @memberof AnalyticsDto
     */
    'date': string;
    /**
     * The numeric value associated with the analytics entry
     * @type {number}
     * @memberof AnalyticsDto
     */
    'value': number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AnalyticsNames = {
    BoughtVouchers: 'Bought Vouchers',
    Visits: 'Visits',
    TotalDownloads: 'Total Downloads',
    VoucherDownloads: 'Voucher Downloads',
    AdDownloads: 'Ad Downloads',
    GeneratedDownloads: 'Generated Downloads'
} as const;

export type AnalyticsNames = typeof AnalyticsNames[keyof typeof AnalyticsNames];


/**
 * 
 * @export
 * @enum {string}
 */

export const AnalyticsType = {
    File: 'file',
    General: 'general'
} as const;

export type AnalyticsType = typeof AnalyticsType[keyof typeof AnalyticsType];


/**
 * 
 * @export
 * @interface AuthorizeDto
 */
export interface AuthorizeDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CheckoutOffersDto
 */
export interface CheckoutOffersDto {
    /**
     * Array of checkout option groups
     * @type {Array<CheckoutOptionGroupDto>}
     * @memberof CheckoutOffersDto
     */
    'offers': Array<CheckoutOptionGroupDto>;
}
/**
 * 
 * @export
 * @interface CheckoutOptionEntryDto
 */
export interface CheckoutOptionEntryDto {
    /**
     * Stripe price ID
     * @type {string}
     * @memberof CheckoutOptionEntryDto
     */
    'priceId': string;
    /**
     * Pricing option details
     * @type {PriceOptionDto}
     * @memberof CheckoutOptionEntryDto
     */
    'priceOption': PriceOptionDto;
}
/**
 * 
 * @export
 * @interface CheckoutOptionGroupDto
 */
export interface CheckoutOptionGroupDto {
    /**
     * Title of the group (e.g. Week, Month)
     * @type {string}
     * @memberof CheckoutOptionGroupDto
     */
    'title': string;
    /**
     * List of pricing entries for this group
     * @type {Array<CheckoutOptionEntryDto>}
     * @memberof CheckoutOptionGroupDto
     */
    'items': Array<CheckoutOptionEntryDto>;
}
/**
 * 
 * @export
 * @interface CreateCheckoutSessionResponseDto
 */
export interface CreateCheckoutSessionResponseDto {
    /**
     * Id of the Stripe\'s checkout session
     * @type {string}
     * @memberof CreateCheckoutSessionResponseDto
     */
    'checkoutId': string;
}
/**
 * 
 * @export
 * @interface CreateProjectDto
 */
export interface CreateProjectDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectDto
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface CreateVoucher
 */
export interface CreateVoucher {
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'email': string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof CreateVoucher
     */
    'code': string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof CreateVoucher
     */
    'expiresAt': string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof CreateVoucher
     */
    'maxDownloads': number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof CreateVoucher
     */
    'downloadCount': number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof CreateVoucher
     */
    'betterBedrockContentOnly': boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof CreateVoucher
     */
    'blocked': boolean;
}
/**
 * 
 * @export
 * @interface DeclineProjectDto
 */
export interface DeclineProjectDto {
    /**
     * 
     * @type {string}
     * @memberof DeclineProjectDto
     */
    'error': string | null;
}
/**
 * 
 * @export
 * @interface DownloadsButtonDto
 */
export interface DownloadsButtonDto {
    /**
     * 
     * @type {DownloadsButtonType}
     * @memberof DownloadsButtonDto
     */
    'type': DownloadsButtonType;
    /**
     * Button inside the category yet not responsible for downloads
     * @type {string}
     * @memberof DownloadsButtonDto
     */
    'text': string;
    /**
     * Link of redirection on button click (can be left if notification is prefered)
     * @type {string}
     * @memberof DownloadsButtonDto
     */
    'link'?: string;
    /**
     * 
     * @type {DownloadsNotificationDto}
     * @memberof DownloadsButtonDto
     */
    'notification'?: DownloadsNotificationDto;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DownloadsButtonType = {
    White: 'white',
    Dark: 'dark',
    Green: 'green'
} as const;

export type DownloadsButtonType = typeof DownloadsButtonType[keyof typeof DownloadsButtonType];


/**
 * 
 * @export
 * @interface DownloadsCategoryDto
 */
export interface DownloadsCategoryDto {
    /**
     * Id of the category (also used in url as a way to determine which category to open)
     * @type {string}
     * @memberof DownloadsCategoryDto
     */
    'id': string;
    /**
     * Name of the category
     * @type {string}
     * @memberof DownloadsCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {Array<DownloadsListDto>}
     * @memberof DownloadsCategoryDto
     */
    'lists': Array<DownloadsListDto>;
}
/**
 * 
 * @export
 * @interface DownloadsDto
 */
export interface DownloadsDto {
    /**
     * Default section which will be opened on the website
     * @type {string}
     * @memberof DownloadsDto
     */
    'default': string;
    /**
     * Featured item on the website (an item after clicking which, user gets redirected to /latest)
     * @type {string}
     * @memberof DownloadsDto
     */
    'featured': string;
    /**
     * Categories of downloads on the website
     * @type {Array<DownloadsCategoryDto>}
     * @memberof DownloadsDto
     */
    'categories': Array<DownloadsCategoryDto>;
}
/**
 * 
 * @export
 * @interface DownloadsItemDto
 */
export interface DownloadsItemDto {
    /**
     * 
     * @type {DownloadsButtonType}
     * @memberof DownloadsItemDto
     */
    'buttonType': DownloadsButtonType;
    /**
     * Title of the item
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'title': string;
    /**
     * Creator of the download item
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'creator': string;
    /**
     * Description of the item
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'description': string;
    /**
     * Id of the item & file name used when downloading and fetching file from the server
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'downloadId': string;
    /**
     * Weigh of the download item
     * @type {number}
     * @memberof DownloadsItemDto
     */
    'itemWeight': number;
    /**
     * Image urls used for download items with preview option
     * @type {Array<string>}
     * @memberof DownloadsItemDto
     */
    'imageAssetUrl': Array<string>;
    /**
     * 
     * @type {Array<DownloadsRichDescriptionDto>}
     * @memberof DownloadsItemDto
     */
    'richDescription'?: Array<DownloadsRichDescriptionDto>;
    /**
     * Tags displayed inside the download grid card
     * @type {Array<string>}
     * @memberof DownloadsItemDto
     */
    'tags'?: Array<string>;
    /**
     * Color of the text inside the download card
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'titleColor'?: string;
    /**
     * Determines whether the item is considered better bedrock content
     * @type {boolean}
     * @memberof DownloadsItemDto
     */
    'betterBedrockContent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DownloadsItemDto
     */
    'tagBgColor'?: string;
}


/**
 * 
 * @export
 * @interface DownloadsListDto
 */
export interface DownloadsListDto {
    /**
     * Title of the list
     * @type {string}
     * @memberof DownloadsListDto
     */
    'title': string;
    /**
     * Description of the list
     * @type {string}
     * @memberof DownloadsListDto
     */
    'description': string;
    /**
     * 
     * @type {Array<DownloadsButtonDto>}
     * @memberof DownloadsListDto
     */
    'buttons'?: Array<DownloadsButtonDto>;
    /**
     * 
     * @type {Array<DownloadsItemDto>}
     * @memberof DownloadsListDto
     */
    'items': Array<DownloadsItemDto>;
}
/**
 * 
 * @export
 * @interface DownloadsNotificationDto
 */
export interface DownloadsNotificationDto {
    /**
     * 
     * @type {DownloadsNotificationType}
     * @memberof DownloadsNotificationDto
     */
    'type': DownloadsNotificationType;
    /**
     * Title of the notification
     * @type {string}
     * @memberof DownloadsNotificationDto
     */
    'title': string;
    /**
     * Description of the notification
     * @type {string}
     * @memberof DownloadsNotificationDto
     */
    'description': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DownloadsNotificationType = {
    Warning: 'warning',
    Success: 'success',
    Info: 'info',
    Error: 'error'
} as const;

export type DownloadsNotificationType = typeof DownloadsNotificationType[keyof typeof DownloadsNotificationType];


/**
 * 
 * @export
 * @interface DownloadsRichDescriptionDto
 */
export interface DownloadsRichDescriptionDto {
    /**
     * Text display above the image
     * @type {string}
     * @memberof DownloadsRichDescriptionDto
     */
    'name': string;
    /**
     * List of links to images
     * @type {Array<string>}
     * @memberof DownloadsRichDescriptionDto
     */
    'images': Array<string>;
}
/**
 * 
 * @export
 * @interface JwtTokenDto
 */
export interface JwtTokenDto {
    /**
     * A unique token for user authentication
     * @type {string}
     * @memberof JwtTokenDto
     */
    'token': string;
    /**
     * 
     * @type {boolean}
     * @memberof JwtTokenDto
     */
    'isNewUser': boolean;
}
/**
 * 
 * @export
 * @interface PriceOptionDto
 */
export interface PriceOptionDto {
    /**
     * Price in EUR
     * @type {number}
     * @memberof PriceOptionDto
     */
    'price': number;
    /**
     * Description of the pricing option
     * @type {string}
     * @memberof PriceOptionDto
     */
    'label': string;
    /**
     * A title for the DownloadMethodCard
     * @type {string}
     * @memberof PriceOptionDto
     */
    'title': string;
    /**
     * Whether this option is featured
     * @type {boolean}
     * @memberof PriceOptionDto
     */
    'featured': boolean;
    /**
     * How many dowloads does user get with the voucher
     * @type {number}
     * @memberof PriceOptionDto
     */
    'maxDownloads': number;
    /**
     * How many days from today does user have to use the voucher
     * @type {number}
     * @memberof PriceOptionDto
     */
    'expiresAt': number;
    /**
     * Specifies whether the voucher allows for download of Better Bedrock content
     * @type {boolean}
     * @memberof PriceOptionDto
     */
    'betterBedrockContentOnly': boolean;
}
/**
 * 
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProjectDto
     */
    'description': { [key: string]: any; } | null;
    /**
     * 
     * @type {ProjectType}
     * @memberof ProjectDto
     */
    'type': ProjectType;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectDto
     */
    'draft': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectDto
     */
    'submitted': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'itemWeight': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectDto
     */
    'betterBedrockContent': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'lastChanged': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'error': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'thumbnail': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'downloadFile': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectDto
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'userId': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ProjectType = {
    World: 'world',
    Texturepack: 'texturepack',
    Shaderpack: 'shaderpack',
    Behaviourpack: 'behaviourpack',
    Addon: 'addon',
    Skin: 'skin',
    Script: 'script'
} as const;

export type ProjectType = typeof ProjectType[keyof typeof ProjectType];


/**
 * 
 * @export
 * @interface SimpleProjectDto
 */
export interface SimpleProjectDto {
    /**
     * 
     * @type {ProjectType}
     * @memberof SimpleProjectDto
     */
    'type': ProjectType;
    /**
     * 
     * @type {UserNameDto}
     * @memberof SimpleProjectDto
     */
    'user': UserNameDto;
    /**
     * 
     * @type {string}
     * @memberof SimpleProjectDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleProjectDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleProjectDto
     */
    'thumbnail': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SimpleProjectDto
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SimpleProjectDto
     */
    'lastChanged': string;
    /**
     * 
     * @type {boolean}
     * @memberof SimpleProjectDto
     */
    'betterBedrockContent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SimpleProjectDto
     */
    'draft': boolean;
}


/**
 * 
 * @export
 * @interface SimpleUserDto
 */
export interface SimpleUserDto {
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'googleId': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'bio': string;
    /**
     * 
     * @type {boolean}
     * @memberof SimpleUserDto
     */
    'banned': boolean;
    /**
     * 
     * @type {string}
     * @memberof SimpleUserDto
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface UpdateProfileDto
 */
export interface UpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'bio': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'linkvertiseId': string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'linkvertiseSecret': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateProfileDto
     */
    'customLinkvertise': boolean;
}
/**
 * 
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UpdateProjectDto
     */
    'description'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {ProjectType}
     * @memberof UpdateProjectDto
     */
    'type'?: ProjectType;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateProjectDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'thumbnail'?: string | null;
}


/**
 * 
 * @export
 * @interface UpdateVoucher
 */
export interface UpdateVoucher {
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'email'?: string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof UpdateVoucher
     */
    'code'?: string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof UpdateVoucher
     */
    'expiresAt'?: string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof UpdateVoucher
     */
    'maxDownloads'?: number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof UpdateVoucher
     */
    'downloadCount'?: number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof UpdateVoucher
     */
    'betterBedrockContentOnly'?: boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof UpdateVoucher
     */
    'blocked'?: boolean;
}
/**
 * 
 * @export
 * @interface UploadFileDto
 */
export interface UploadFileDto {
    /**
     * 
     * @type {string}
     * @memberof UploadFileDto
     */
    'fileUrl': string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'googleId': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'bio': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'banned': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'customLinkvertise': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'linkvertiseId': string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'linkvertiseSecret': string | null;
}
/**
 * 
 * @export
 * @interface UserNameDto
 */
export interface UserNameDto {
    /**
     * 
     * @type {string}
     * @memberof UserNameDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface VoucherDto
 */
export interface VoucherDto {
    /**
     * Unique identifier of the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'id': string;
    /**
     * Email associated with the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'email': string;
    /**
     * Unique checkout session ID associated with the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'checkoutId'?: string | null;
    /**
     * Unique voucher code
     * @type {string}
     * @memberof VoucherDto
     */
    'code': string;
    /**
     * Date and time when the voucher was created
     * @type {string}
     * @memberof VoucherDto
     */
    'createdAt': string;
    /**
     * Expiry date of the voucher
     * @type {string}
     * @memberof VoucherDto
     */
    'expiresAt': string;
    /**
     * Maximum number of times the voucher can be downloaded
     * @type {number}
     * @memberof VoucherDto
     */
    'maxDownloads': number;
    /**
     * Current number of times the voucher has been downloaded
     * @type {number}
     * @memberof VoucherDto
     */
    'downloadCount': number;
    /**
     * Restrict voucher to Better Bedrock content only
     * @type {boolean}
     * @memberof VoucherDto
     */
    'betterBedrockContentOnly': boolean;
    /**
     * Determins whether voucher is blocked
     * @type {boolean}
     * @memberof VoucherDto
     */
    'blocked': boolean;
}

/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerAnalytics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerAnalytics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerAnalytics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerAnalytics(options?: RawAxiosRequestConfig): AxiosPromise<Array<AnalyticsDto>> {
            return localVarFp.analyticsControllerAnalytics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerUser(options?: RawAxiosRequestConfig): AxiosPromise<Array<AnalyticsDto>> {
            return localVarFp.analyticsControllerUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerAnalytics(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerAnalytics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsControllerUser(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminAuthenticate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthorizeDto} authorizeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthorize: async (authorizeDto: AuthorizeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizeDto' is not null or undefined
            assertParamExists('authControllerAuthorize', 'authorizeDto', authorizeDto)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAdminAuthenticate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAdminAuthenticate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerAdminAuthenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthenticate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthenticate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerAuthenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthorizeDto} authorizeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthorize(authorizeDto: AuthorizeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthorize(authorizeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerAuthorize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminAuthenticate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerAdminAuthenticate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate(options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.authControllerAuthenticate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorizeDto} authorizeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthorize(authorizeDto: AuthorizeDto, options?: RawAxiosRequestConfig): AxiosPromise<JwtTokenDto> {
            return localVarFp.authControllerAuthorize(authorizeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAdminAuthenticate(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAdminAuthenticate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAuthenticate(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAuthenticate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorizeDto} authorizeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAuthorize(authorizeDto: AuthorizeDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAuthorize(authorizeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerActivate: async (checkoutId?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (checkoutId !== undefined) {
                localVarQueryParameter['checkoutId'] = checkoutId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerCreate: async (priceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'priceId' is not null or undefined
            assertParamExists('checkoutControllerCreate', 'priceId', priceId)
            const localVarPath = `/checkout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (priceId !== undefined) {
                localVarQueryParameter['priceId'] = priceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerOffers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerWebhook: async (stripeSignature: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeSignature' is not null or undefined
            assertParamExists('checkoutControllerWebhook', 'stripeSignature', stripeSignature)
            const localVarPath = `/checkout/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (stripeSignature != null) {
                localVarHeaderParameter['stripe-signature'] = String(stripeSignature);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerActivate(checkoutId, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerActivate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCheckoutSessionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerCreate(priceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerOffers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutOffersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerOffers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerWebhook(stripeSignature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutControllerWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
         * @param {string} [code] Code of a voucher to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.checkoutControllerActivate(checkoutId, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} priceId Id of the Stripe\&#39;s price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateCheckoutSessionResponseDto> {
            return localVarFp.checkoutControllerCreate(priceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerOffers(options?: RawAxiosRequestConfig): AxiosPromise<CheckoutOffersDto> {
            return localVarFp.checkoutControllerOffers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stripeSignature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkoutControllerWebhook(stripeSignature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     * 
     * @param {string} [checkoutId] Id of the Stripe\&#39;s checkout session
     * @param {string} [code] Code of a voucher to activate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerActivate(checkoutId?: string, code?: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerActivate(checkoutId, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} priceId Id of the Stripe\&#39;s price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerCreate(priceId: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerCreate(priceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerOffers(options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerOffers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stripeSignature 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutControllerWebhook(stripeSignature: string, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutControllerWebhook(stripeSignature, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDownloads: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/downloads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerDownloads(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerDownloads(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerDownloads']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDownloads(options?: RawAxiosRequestConfig): AxiosPromise<DownloadsDto> {
            return localVarFp.contentControllerDownloads(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentControllerDownloads(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerDownloads(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownload: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGenerate: async (file: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('downloadControllerGenerate', 'file', file)
            const localVarPath = `/download/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [hash] Hash generated to go through the ads on linkvertise
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerVerify: async (hash?: string, code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/download/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerDownload(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerDownload(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerDownload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerGenerate(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerGenerate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [hash] Hash generated to go through the ads on linkvertise
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadControllerVerify(hash?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadsItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadControllerVerify(hash, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadApi.downloadControllerVerify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerDownload(options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadControllerDownload(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} file Download ID to generate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadControllerGenerate(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [hash] Hash generated to go through the ads on linkvertise
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadControllerVerify(hash?: string, code?: string, options?: RawAxiosRequestConfig): AxiosPromise<DownloadsItemDto> {
            return localVarFp.downloadControllerVerify(hash, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerDownload(options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerDownload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} file Download ID to generate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerGenerate(file: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerGenerate(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [hash] Hash generated to go through the ads on linkvertise
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public downloadControllerVerify(hash?: string, code?: string, options?: RawAxiosRequestConfig) {
        return DownloadApiFp(this.configuration).downloadControllerVerify(hash, code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCancelSubmission: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerCancelSubmission', 'id', id)
            const localVarPath = `/project/submit/cancel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate: async (createProjectDto: CreateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectDto' is not null or undefined
            assertParamExists('projectControllerCreate', 'createProjectDto', createProjectDto)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DeclineProjectDto} declineProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDecline: async (id: string, declineProjectDto: DeclineProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerDecline', 'id', id)
            // verify required parameter 'declineProjectDto' is not null or undefined
            assertParamExists('projectControllerDecline', 'declineProjectDto', declineProjectDto)
            const localVarPath = `/project/decline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(declineProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerDelete', 'id', id)
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDraftDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerDraftDetails', 'id', id)
            const localVarPath = `/project/draft/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerProjectDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerProjectDetails', 'id', id)
            const localVarPath = `/project/details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerPublish: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerPublish', 'id', id)
            const localVarPath = `/project/publish/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerSubmit: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerSubmit', 'id', id)
            const localVarPath = `/project/submit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerSubmitted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/submitted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate: async (id: string, updateProjectDto: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectControllerUpdate', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUploadProjectFile: async (id: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUploadProjectFile', 'id', id)
            const localVarPath = `/project/file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUserProjects: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUserProjects', 'id', id)
            const localVarPath = `/project/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerCancelSubmission(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerCancelSubmission(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerCancelSubmission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerCreate(createProjectDto: CreateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerCreate(createProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DeclineProjectDto} declineProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerDecline(id: string, declineProjectDto: DeclineProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerDecline(id, declineProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerDecline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerDraftDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerDraftDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerDraftDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerProjectDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerProjectDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerProjectDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerPublish(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerPublish(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerPublish']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerSubmit(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerSubmit(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerSubmitted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimpleProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerSubmitted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerSubmitted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUpdate(id, updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUploadProjectFile(id: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUploadProjectFile(id, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerUploadProjectFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUserProjects(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimpleProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUserProjects(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerUserProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCancelSubmission(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDto> {
            return localVarFp.projectControllerCancelSubmission(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate(createProjectDto: CreateProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerCreate(createProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DeclineProjectDto} declineProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDecline(id: string, declineProjectDto: DeclineProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerDecline(id, declineProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDraftDetails(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDto> {
            return localVarFp.projectControllerDraftDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProjectDto>> {
            return localVarFp.projectControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerProjectDetails(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDto> {
            return localVarFp.projectControllerProjectDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerPublish(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerPublish(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerSubmit(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDto> {
            return localVarFp.projectControllerSubmit(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerSubmitted(options?: RawAxiosRequestConfig): AxiosPromise<Array<SimpleProjectDto>> {
            return localVarFp.projectControllerSubmitted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDto> {
            return localVarFp.projectControllerUpdate(id, updateProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUploadProjectFile(id: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<UploadFileDto> {
            return localVarFp.projectControllerUploadProjectFile(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUserProjects(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SimpleProjectDto>> {
            return localVarFp.projectControllerUserProjects(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerCancelSubmission(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerCancelSubmission(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProjectDto} createProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerCreate(createProjectDto: CreateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerCreate(createProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DeclineProjectDto} declineProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerDecline(id: string, declineProjectDto: DeclineProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerDecline(id, declineProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerDelete(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerDraftDetails(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerDraftDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerFindAll(options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerProjectDetails(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerProjectDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerPublish(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerPublish(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerSubmit(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerSubmit(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerSubmitted(options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerSubmitted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectDto} updateProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerUpdate(id, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerUploadProjectFile(id: string, file?: File, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerUploadProjectFile(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerUserProjects(id: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerUserProjects(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateProfileDto} updateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateProfile: async (updateProfileDto: UpdateProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileDto' is not null or undefined
            assertParamExists('userControllerUpdateProfile', 'updateProfileDto', updateProfileDto)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserInfoById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUserInfoById', 'id', id)
            const localVarPath = `/user/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserInfoByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('userControllerUserInfoByName', 'name', name)
            const localVarPath = `/user/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateProfileDto} updateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateProfile(updateProfileDto: UpdateProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateProfile(updateProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUserInfoById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUserInfoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUserInfoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUserInfoByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUserInfoByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUserInfoByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateProfileDto} updateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateProfile(updateProfileDto: UpdateProfileDto, options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.userControllerUpdateProfile(updateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserInfoById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SimpleUserDto> {
            return localVarFp.userControllerUserInfoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserInfoByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<SimpleUserDto> {
            return localVarFp.userControllerUserInfoByName(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UpdateProfileDto} updateProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdateProfile(updateProfileDto: UpdateProfileDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateProfile(updateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUserInfoById(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUserInfoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUserInfoByName(name: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUserInfoByName(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoucherApi - axios parameter creator
 * @export
 */
export const VoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerCreate: async (createVoucher: CreateVoucher, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVoucher' is not null or undefined
            assertParamExists('voucherControllerCreate', 'createVoucher', createVoucher)
            const localVarPath = `/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVoucher, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerUpdate: async (id: string, updateVoucher: UpdateVoucher, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voucherControllerUpdate', 'id', id)
            // verify required parameter 'updateVoucher' is not null or undefined
            assertParamExists('voucherControllerUpdate', 'updateVoucher', updateVoucher)
            const localVarPath = `/voucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVoucher, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerVouchers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherApi - functional programming interface
 * @export
 */
export const VoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerCreate(createVoucher, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerUpdate(id, updateVoucher, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherControllerVouchers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoucherDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherControllerVouchers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoucherApi.voucherControllerVouchers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoucherApi - factory interface
 * @export
 */
export const VoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateVoucher} createVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.voucherControllerCreate(createVoucher, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateVoucher} updateVoucher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig): AxiosPromise<VoucherDto> {
            return localVarFp.voucherControllerUpdate(id, updateVoucher, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherControllerVouchers(options?: RawAxiosRequestConfig): AxiosPromise<Array<VoucherDto>> {
            return localVarFp.voucherControllerVouchers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoucherApi - object-oriented interface
 * @export
 * @class VoucherApi
 * @extends {BaseAPI}
 */
export class VoucherApi extends BaseAPI {
    /**
     * 
     * @param {CreateVoucher} createVoucher 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerCreate(createVoucher: CreateVoucher, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerCreate(createVoucher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateVoucher} updateVoucher 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerUpdate(id: string, updateVoucher: UpdateVoucher, options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerUpdate(id, updateVoucher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApi
     */
    public voucherControllerVouchers(options?: RawAxiosRequestConfig) {
        return VoucherApiFp(this.configuration).voucherControllerVouchers(options).then((request) => request(this.axios, this.basePath));
    }
}



